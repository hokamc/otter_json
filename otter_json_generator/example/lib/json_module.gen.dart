// generated by otter_json_generator
// don't make change on this manually

import 'package:example/example.dart';
import 'package:otter_json/otter_json.dart';
import 'package:otter_json/src/json/primitive_serializers.dart';

class OtterGeneratedJsonModule implements GeneratedJsonModule {
  @override
  Map<String, JsonSerializer> serializers() {
    return {
      'String': StringJsonSerializer(),
      'double': DoubleJsonSerializer(),
      'int': IntJsonSerializer(),
      'num': NumJsonSerializer(),
      'bool': BoolJsonSerializer(),
      'Color': ExampleSerializer(),
      'Example': ExampleJsonSerializer(),
      'AnotherExample': AnotherExampleJsonSerializer(),
      'ExampleEnum': ExampleEnumJsonSerializer(),
    };
  }
}

class ExampleJsonSerializer implements JsonSerializer<Example, Map<String, dynamic>> {
  @override
  Example decode(Map<String, dynamic> output) {
    return Example(
      name: OtterInternal.decode(output['name2'])!,
      age: OtterInternal.decode(output['age'])!,
      money: OtterInternal.decode(output['money'])!,
      list: OtterInternal.decodeList(output['list']),
      map: OtterInternal.decodeMap(output['map']),
      example2: OtterInternal.decode(output['example2'])!,
      example2s: OtterInternal.decodeList(output['example2s']),
      color: OtterInternal.decode(output['color'])!,
      nullInt: OtterInternal.decode(output['nullInt']),
      eenum: OtterInternal.decode(output['eenum'])!,
    );
  }

  @override
  Map<String, dynamic> encode(Example input) {
    return {
      'name2': OtterInternal.encode(input.name)!,
      'age': OtterInternal.encode(input.age)!,
      'money': OtterInternal.encode(input.money)!,
      'list': OtterInternal.encodeList(input.list),
      'map': OtterInternal.encodeMap(input.map),
      'example2': OtterInternal.encode(input.example2)!,
      'example2s': OtterInternal.encodeList(input.example2s),
      'color': OtterInternal.encode(input.color)!,
      'nullInt': OtterInternal.encode(input.nullInt),
      'eenum': OtterInternal.encode(input.eenum)!,
    };
  }
}

class AnotherExampleJsonSerializer implements JsonSerializer<AnotherExample, Map<String, dynamic>> {
  @override
  AnotherExample decode(Map<String, dynamic> output) {
    return AnotherExample(
      name: OtterInternal.decode(output['name'])!,
    );
  }

  @override
  Map<String, dynamic> encode(AnotherExample input) {
    return {
      'name': OtterInternal.encode(input.name)!,
    };
  }
}

class ExampleEnumJsonSerializer implements JsonSerializer<ExampleEnum, String> {
  final Map<ExampleEnum, String> _encoder = {
    ExampleEnum.a1: 'A1',
    ExampleEnum.a2: 'a2',
    ExampleEnum.b1: 'b1',
    ExampleEnum.b2: 'b2',
  };

  final Map<String, ExampleEnum> _decoder = {
    'A1': ExampleEnum.a1,
    'a2': ExampleEnum.a2,
    'b1': ExampleEnum.b1,
    'b2': ExampleEnum.b2,
  };

  @override
  ExampleEnum decode(String output) {
    if (!_decoder.containsKey(output)) {
      throw ArgumentError("enum not found, enum=$output, class=ExampleEnumJsonSerializer");
    }
    return _decoder[output]!;
  }

  @override
  String encode(ExampleEnum input) {
    if (!_encoder.containsKey(input)) {
      throw ArgumentError("enum not found, enum=input, class=ExampleEnumJsonSerializer");
    }
    return _encoder[input]!;
  }
}
