String generatedModuleTemplate(Set<String> dependencies, Set<String> modules) {
  return '''
// generated by otter_json_generator
// don't make change on this manually
  
import 'package:otter_json/otter_json.dart';
${dependencies.join('\n')}

class OtterGeneratedJsonModule implements GeneratedJsonModule {
  @override
  Map<String, JsonSerializer> serializers() {
    return {
${modules.join('\n')}
    };
  }
}

''';
}

String jsonSerializerTemplate(String name, String encode, String decode) {
  return '''

class ${name}JsonSerializer implements JsonSerializer<$name, Map<String, dynamic>> {
  @override
  ${name} decode(Map<String, dynamic> output) {
    $decode
  }

  @override
  Map<String, dynamic> encode(${name} input) {
    $encode
  }
}

''';
}

String enumJsonSerializerTemplate(String name, String encoder, String decoder, String type) {
  return '''

class ${name}JsonSerializer implements JsonSerializer<$name, ${type}> {
  final Map<$name, ${type}> _encoder = {
$encoder  };
  
  final Map<${type}, $name> _decoder = {
$decoder  };
 

  @override
  ${name} decode(${type} output) {
    if (!_decoder.containsKey(output)) {
      throw ArgumentError("enum not found, enum=\$output, class=${name}JsonSerializer");
    }
    return _decoder[output]!;
  }

  @override
  ${type} encode(${name} input) {
    if (!_encoder.containsKey(input)) {
      throw ArgumentError("enum not found, enum=\$input, class=${name}JsonSerializer");
    }
    return _encoder[input]!;
  }
}

''';
}
